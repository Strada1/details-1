{"mappings":"AAAA,MAAM,SAAS,GAAG,gDAAgD,AAAC;AACnE,MAAM,MAAM,GAAG,kCAAkC,AAAC;AAElD,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,AAAC;AACvD,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,AAAC;AACnD,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,gBAAgB,CAAC,AAAC;AACjE,MAAM,kBAAkB,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,AAAC;AACzE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,AAAC;AACrE,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,gBAAgB,CAAC,AAAC;AACjE,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,gBAAgB,CAAC,AAAC;AACjE,MAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,AAAC;AAC/D,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,gBAAgB,CAAC,AAAC;AACjE,MAAM,WAAW,GAAG,cAAc,EAAE,AAAC;AAErC,MAAM,OAAO,GAAG,iBAAiB,EAAE,AAAC;AAEpC,SAAS,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE;IAC3B,IAAI,CAAC,EAAE,UAAU,EAAE,QAAQ,AAAC;IAE5B,UAAU,GAAG,QAAQ,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;IAC3D,IAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,CAClC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAGzC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;IACvD,IAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAChC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAGzE,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IACxD,GAAG,CAAC,aAAa,CAAC,SAAS,IAAI,SAAS,CAAC;CAC5C;AAED,eAAe,WAAW,GAAG;IAEzB,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;IAErD,IAAI,GAAG,GAAG,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,AAAC;IACrE,IAAI,IAAI,AAAC;IAET,IAAI;QACA,IAAI,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,AAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,EAAE,EACZ,SAAS,CAAC,KAAK,GAAG,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC;aACjD;YACH,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC7B,IAAI,IAAI,CAAC,GAAG,KAAK,KAAK,EAClB,SAAS,CAAC,KAAK,GAAG,iBAAiB,CAAC;iBACjC;gBACH,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC9B,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,AAAC;gBAC9D,cAAc,CAAC,SAAS,GAAG,WAAW,CAAC;gBACvC,kBAAkB,CAAC,SAAS,GAAG,WAAW,CAAC;gBAC3C,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC;gBAC/E,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAChD,cAAc,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,kBAAkB,EAAE,CAAC;gBAClF,aAAa,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,kBAAkB,EAAE,CAAC;aACnF;SACJ;KACJ,CAAC,OAAO,GAAG,EAAE;QACV,SAAS,CAAC,KAAK,GAAG,eAAe,GAAG,GAAG,CAAC,CAAC,6BAA6B;KACzE;AACD,gBAAgB;AAChB,wEAAwE;AACxE,+CAA+C;AAC/C,uDAAuD;AACvD,sBAAsB;AACtB,4EAA4E;AAC5E,sEAAsE;AACtE,sBAAsB;AACtB,8CAA8C;AAC9C,oCAAoC;AACpC,mDAAmD;AACnD,mBAAmB;AACnB,6CAA6C;AAC7C,sFAAsF;AACtF,YAAY;AACZ,QAAQ;AACR,QAAQ;AACR,GAAG;CACN;AAED,SAAS,WAAW,CAAC,QAAQ,EAAE;IAE3B,SAAS,CAAC,KAAK,GAAG,QAAQ,CAAC;IAE3B,WAAW,EAAE,CAAC;CACjB;AAED,SAAS,cAAc,GAAG;IACtB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC7B,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAE5B,oBAAoB,EAAE,CAAC;CAC1B;AAED,SAAS,eAAe,CAAC,OAAO,EAAE;IAC9B,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAE5B,oBAAoB,EAAE,CAAC;CAC1B;AAED,SAAS,oBAAoB,GAAG;IAE5B,cAAc,CAAC,SAAS,GAAG,EAAE,CAAC;IAE9B,OAAO,CAAC,OAAO,CAAC,CAAA,KAAK,GAAI;QACrB,IAAI,EAAE,GAAG,CAAC;oFACkE,EAAE,KAAK,CAAC;;sDAEtC,EAAE,KAAK,CAAC,OAAO,CAAC,AAAC;QAC/D,cAAc,CAAC,kBAAkB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;KACvD,CACA,CAAC;CAEL;AAED,SAAS,kBAAkB,CAAC,cAAc,EAAE;IAExC,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;CAExE;AAED,SAAS,iBAAiB,GAAG;IAEzB,IAAI,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,EACxC,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAE5D,OAAO,IAAI,GAAG,EAAE,CAAC;CAExB;AAED,SAAS,cAAc,GAAG;IACtB,IAAI,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE,SAAS,CAAC,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;CAC3G;AAED,cAAc,EAAE,CAAC;AAEjB,oBAAoB,EAAE,CAAC","sources":["script.js"],"sourcesContent":["const serverUrl = 'http://api.openweathermap.org/data/2.5/weather';\nconst apiKey = 'f660a2fb1e4bad108d6160b7f58c555f';\n\nconst inputCity = document.getElementById(\"inputCity\");\nconst nowCity = document.getElementById(\"nowCity\");\nconst nowTemperature = document.getElementById(\"nowTemperature\");\nconst detailsTemperature = document.getElementById(\"detailsTemperature\");\nconst detailsFeelsLike = document.getElementById(\"detailsFeelsLike\");\nconst detailsWeather = document.getElementById(\"detailsWeather\");\nconst detailsSunrise = document.getElementById(\"detailsSunrise\");\nconst detailsSunset = document.getElementById(\"detailsSunset\");\nconst addedLocations = document.getElementById(\"addedLocations\");\nconst currentCity = getCurrentCity();\n\nconst сitySet = getFavoriteCities();\n\nfunction openTab(evt, tabName) {\n    var i, tabcontent, tablinks;\n\n    tabcontent = document.getElementsByClassName(\"tabcontent\");\n    for (i = 0; i < tabcontent.length; i++) {\n        tabcontent[i].style.display = \"none\";\n    }\n\n    tablinks = document.getElementsByClassName(\"tablinks\");\n    for (i = 0; i < tablinks.length; i++) {\n        tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n    }\n\n    document.getElementById(tabName).style.display = \"flex\";\n    evt.currentTarget.className += \" active\";\n}\n\nasync function searchClick() {\n\n    localStorage.setItem('currentCity', inputCity.value);\n\n    let url = `${serverUrl}?q=${inputCity.value.trim()}&appid=${apiKey}`;\n    let json;\n\n    try {\n        let response = await fetch(url);\n        if (!response.ok) { // если НЕ HTTP-статус в диапазоне 200-299\n            inputCity.value = \"Ошибка HTTP: \" + response.status;\n        } else {\n            json = await response.json();\n            if (json.cod === \"404\") {\n                inputCity.value = \"City not found \";\n            } else {\n                nowCity.innerHTML = json.name;\n                let temperature = Math.floor(Number(json.main.temp) - 273.15);\n                nowTemperature.innerHTML = temperature;\n                detailsTemperature.innerHTML = temperature;\n                detailsFeelsLike.innerHTML = Math.floor(Number(json.main.feels_like) - 273.15);\n                detailsWeather.innerHTML = json.weather[0].main;\n                detailsSunrise.innerHTML = new Date(json.sys.sunrise * 1000).toLocaleTimeString();\n                detailsSunset.innerHTML = new Date(json.sys.sunset * 1000).toLocaleTimeString();\n            }\n        }\n    } catch (err) {\n        inputCity.value = \"Ошибка HTTP: \" + err; // TypeError: failed to fetch\n    }\n    // Через Promise\n    // let url = `${serverUrl}?q=${inputCity.value.trim()}&appid=${apiKey}`;\n    // fetch(url).then(response => response.json())\n    //     .catch(err => inputCity.value = \"Ошибка HTTP: \")\n    //     .then(json => {\n    //         // if (!response.ok) { // если НЕ HTTP-статус в диапазоне 200-299\n    //         //     inputCity.value = \"Ошибка HTTP: \" + response.status;\n    //         // } else {\n    //         //    json = await response.json();\n    //         if (json.cod === \"404\") {\n    //             inputCity.value = \"City not found \";\n    //         } else {\n    //             nowCity.innerHTML = json.name;\n    //             nowTemperature.innerHTML = Math.floor(Number(json.main.temp) - 273.15);\n    //         }\n    //     }\n    //     )\n    //}\n}\n\nfunction chooseClick(cityName) {\n\n    inputCity.value = cityName;\n\n    searchClick();\n}\n\nfunction addToFavorites() {\n    сitySet.add(inputCity.value);\n    saveFavoriteCities(сitySet);\n\n    refreshAddedLocation();\n}\n\nfunction deleteCityClick(element) {\n    сitySet.delete(element.attributes.cityName.value);\n    saveFavoriteCities(сitySet);\n\n    refreshAddedLocation();\n}\n\nfunction refreshAddedLocation() {\n\n    addedLocations.innerHTML = '';\n\n    сitySet.forEach(value => {\n        let li = `<li class=\"container-item flex-row addedLocation\">\n            <span class=\"container-item-city\" onclick=\"chooseClick(this.innerText)\">${value}</span>\n            <img class=\"close\" src=\"./img/close.svg\" alt=\"close\"\n            onclick=\"deleteCityClick(this)\" cityName=\"${value}\"></li>`;\n        addedLocations.insertAdjacentHTML('afterbegin', li);\n    }\n    );\n\n}\n\nfunction saveFavoriteCities(favoriteCities) {\n\n    localStorage.setItem('сitySet', JSON.stringify(Array.from(сitySet)));\n\n}\n\nfunction getFavoriteCities() {\n\n    if (localStorage.getItem('сitySet') !== null) {\n        return new Set(JSON.parse(localStorage.getItem(\"сitySet\")));\n    } else {\n        return new Set();\n    }\n}\n\nfunction getCurrentCity() {\n    if (localStorage.getItem('currentCity') !== null) inputCity.value = localStorage.getItem('currentCity');\n}\n\ngetCurrentCity();\n\nrefreshAddedLocation();\n\n\n\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}